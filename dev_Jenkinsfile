pipeline {
    agent any
options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5'))
}   
    environment {
        scannerHome = tool 'sonar-scanner'
        
    }

    stages{
        stage('Compile Front'){
           
            options{
                timeout(time: 5, unit: "MINUTES")
            }
            steps{
                sh "npm install"
                sh "npm run build"
            }
        }
        stage('Run tests'){
            options{
                timeout(time 5, unit: "MINUTES")
            }
            steps{
                 sh "npm install"
                 sh "npm test"
            }
        }
        stage('SonarQube'){
            options{
                timeout(time: 5, unit: 'MINUTES')
                retry(2)
            }
            steps{
                withSonarQubeEnv('Sonar'){
                    sh "${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=FrontTheare \
                    -Dsonar.sources=. "
                }
            }
        }
        stage('Quality gate') {
             options{
                 timeout(time: 1 , unit : 'MINUTES')
                 retry(2)
            }
            steps {
                script{
                    qualitygate = waitForQualityGate()
                    if (qualitygate.status != "OK") {
                        currentBuild.result = "FAILURE"
                        slackSend color: "#f5330c", message: "Quality Gate Failed "
                    }    
                }
            }
        }
    }
    post{
        always{
            cleanWs()
        }
        success{
            build job: 'Front_Build' , propagate: false
        }
        failure{
            slackSend  (channel: '#builds' , color: "#f5330c", message: "Build failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
        }
         aborted{
            slackSend (channel: '#builds' , color: "#f0f5f5", message: "Build aborted: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
        }
    }
}
